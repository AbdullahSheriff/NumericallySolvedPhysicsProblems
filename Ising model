import numpy as np
from random import random, randrange,randint
import matplotlib.pyplot as plt



J = 1.0      
kB = 1.0     
num_dipoles = 100 #20?  
N = int(1e5) # steps
T = 1   


spin = np.random.randint(0, 2, size = (num_dipoles, num_dipoles)) #all 0 or +1
spin[spin == 0] = -1 # Change  0 to -1 


def energyfunction(spin):
    
	adjx = np.sum(spin[:-1]*spin[1:]) 
	adjy = np.sum(np.transpose(spin)[:-1]*np.transpose(spin)[1:]) 
	return -J*(adjx + adjy)


def acceptance(E1, E2, T):
    
	if E2 <= E1:
		return True 
	else:

		if np.random.rand() < np.exp(-(E2-E1)/(kB*T)):
			return True 
		else:
			return False 

# Total magnetization
def Mtot(spin):
	return np.sum(spin)

# generate array of dipoles and initialize diagnostic quantities
#dipoles = np.ones(num_dipoles, int)  # hint: this will not work
energy = [energyfunction(spin)]
magnet = [Mtot(spin)]

# E = energyfunction(J, dipoles)
# energy.append(E)
# magnet.append(sum(dipoles))
# print(dipoles)


tplot = [0]


for i in range(N):
	
	x = np.random.randint(0, num_dipoles) # choose a victim
	y = np.random.randint(0, num_dipoles)
	
	oldEnergy = energyfunction(spin)
	spin[x][y] *= -1 # # propose to flip the victim
	newEnergy = energyfunction(spin) # compute Energy of proposed new state
    # calculate acceptance probability
	if acceptance(oldEnergy, newEnergy, T) == True:
		energy.append(newEnergy)              
		magnet.append(Mtot(spin)) 
		tplot.append(i)
	else:
		spin[x][y] *= -1  


plt.figure(1)
plt.plot(tplot, magnet,c='r')
plt.xlabel('Time')
plt.ylabel('Magnetization')
plt.title('Total Magnetization vs time (Ising model)')
plt.show()


# plt.figure(2)
# plt.plot(tplot, energy,c='lime')
# plt.xlabel('Time')
# plt.ylabel('Energy')
# plt.title('Total Energy vs time (Ising model)')
# plt.show()

    
    
plt.figure(3)   
plt.imshow(spin)
plt.title('Shows if Dipoles are spin up(yellow) or down(maroon)') 
plt.show()


# plot energy, magnetization   

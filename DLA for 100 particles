import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc
from random import randint


def nextmove(x, y):
    """ randomly choose a direction
    1 = up, 2 = down, 3 = left, 4 = right"""
    direction =  randint(1,4)

    if direction == 1:  # move up
        y += 1
    elif direction == 2:  # move down
        y -= 1
    elif direction == 3:  # move right
        x += 1
    elif direction == 4:  # move left
        x -= 1
    else:
        print("error: direction isn't 1-4")

    return x, y


font = {'family': 'DejaVu Sans', 'size': 14}  # adjust fonts
rc('font', **font)

# %% main program starts here ------------------------------------------------|
# YOU NEED TO FINISH IT!

plt.ion()

Lp = 201  # size of domain
N = 100  # number of particles
# array to represent whether each gridpoint has an anchored particle
anchored = np.zeros((Lp, Lp), dtype=int)
# list to represent x and y positions of anchored points
anchored_points = [[], []]

centre_point = (Lp-1)//2  # middle point of domain

# set up animation of anchored points
plt.figure(1)
plt.title('DLA run for {} particles'.format(N))
plt.plot(centre_point, centre_point, '.r', markersize=10)
plt.xlim([-1, Lp])
plt.ylim([-1, Lp])
plt.xlabel('$x$ []')
plt.ylabel('$y$ []')
Nt = 100000
# set up animation of anchored points
animation_interval = 50  # how many moves to make before updating plot of
xpp1= np.empty([100, 100000], int)
ypp1 = np.empty([100, 100000], int)
Killx=0*np.empty([100, 3], int)
Killy=0*np.empty([100,3], int)
p=0
for j in range(N):
    xp = centre_point
    yp = centre_point
    #i = 0  # counter to keep track of animation of moving particle

    for i in range(Nt):
        xpp, ypp = nextmove(xp, yp)
        xpp1[j,i]= xpp
        ypp1[j,i]= ypp
        if 0 < xpp < Lp:
            xp = xpp
        else:
            Killx[p,0]=xpp
            Killx[p,1]=j
            Killx[p,2]=i
           
            Killy[p,0]=ypp
            Killy[p,1]=j
            Killy[p,2]=i
            p = p+ 1
            break    
        if 0< ypp < Lp:
            yp=ypp
        else:
            Killx[p,0]=xpp
            Killx[p,1]=j
            Killx[p,2]=i
            
            Killy[p,0]=ypp
            Killy[p,1]=j
            Killy[p,2]=i
            p = p+ 1
            break
duplicateXloc=list()
duplicateYloc=list()
        
for i in range(100):
    for j in range(100):
        if i != j and Killx[i,0]==Killx[j,0] and Killy[i,0]==Killy[j,0] :
            # duplicateXloc.insert(i,Killx[i])
            # duplicateXloc.insert(i,Killy[i])
            # print(Killx[i,1],Killx[i,2])
            # print(Killx[j,1],Killx[j,2])
            if Killx[i,1] > Killx[j,1] and Killx[i,0] == 101 :
                xpp1[Killx[i,1],Killx[i,2]]= xpp1[Killx[i,1],Killx[i,2]]-1
                print(xpp1[Killx[i,1],Killx[i,2]], ypp1[Killy[i,1],Killy[i,2]])
                print(xpp1[Killx[j,1],Killx[j,2]], ypp1[Killy[j,1],Killy[j,2]])
            if Killx[i,1] > Killx[j,1] and Killx[i,0] == 0 :
                xpp1[Killx[i,1],Killx[i,2]]= xpp1[Killx[i,1],Killx[i,2]]+1
                print(xpp1[Killx[i,1],Killx[i,2]], ypp1[Killy[i,1],Killy[i,2]])
                print(xpp1[Killx[j,1],Killx[j,2]], ypp1[Killy[j,1],Killy[j,2]])
            if Killy[i,1] > Killy[j,1] and Killy[i,0] == 101 :
                ypp1[Killy[i,1],Killy[i,2]]= ypp1[Killy[i,1],Killy[i,2]]-1
                print(xpp1[Killx[i,1],Killx[i,2]], ypp1[Killy[i,1],Killy[i,2]])
                print(xpp1[Killx[j,1],Killx[j,2]], ypp1[Killy[j,1],Killy[j,2]])
            if Killy[i,1] > Killy[j,1] and Killy[i,0] == 0 :
                ypp1[Killy[i,1],Killy[i,2]]= ypp1[Killy[i,1],Killy[i,2]]+1
                print(xpp1[Killx[i,1],Killx[i,2]], ypp1[Killy[i,1],Killy[i,2]])
                print(xpp1[Killx[j,1],Killx[j,2]], ypp1[Killy[j,1],Killy[j,2]])
                
            
                
                

            
            
    

for i in range(100):
    plt.figure(1)
    plt.title('DLA run for {} particles'.format(N))
    plt.plot(xpp1[i,:], ypp1[i,:], '.r', markersize=1)
    plt.xlim([-1, Lp])
    plt.ylim([-1, Lp])
    plt.xlabel('$x$ []')
    plt.ylabel('$y$ []')
    plt.show()
